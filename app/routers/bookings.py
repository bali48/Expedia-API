from fastapi import APIRouter, Depends, Query
from sqlalchemy.orm import Session
from typing import List, Optional
from app.db.database import get_db
from app.db import schemas
from app.services import bookings_service

router = APIRouter(prefix="/bookings", tags=["Bookings"])

@router.post("/create", response_model=schemas.BookingResponse)
def create_booking(booking: schemas.BookingCreate, db: Session = Depends(get_db)):
    """
    Create a new booking.
    
    Frontend should send:
    - For logged-in users: user_id (session_id optional)
    - For guest users: session_id (generated by frontend, e.g., using UUID)
    
    Example guest booking:
    {
        "booking_type": "flight",
        "item_id": 123,
        "details": "NYC to LA",
        "price": 299.99,
        "session_id": "guest-12345-abcde"  // Frontend generates this
    }
    """
    return bookings_service.create_booking(db, booking)

@router.get("/list", response_model=List[schemas.BookingResponse])
def list_bookings(
    user_id: Optional[int] = Query(None, description="User ID for logged-in user bookings"), 
    session_id: Optional[str] = Query(None, description="Session ID for guest bookings (same ID frontend used when creating)"),
    db: Session = Depends(get_db)
):
    """
    List bookings based on user type:
    
    Frontend should call:
    - For logged-in users: GET /bookings/list?user_id=123
    - For guest users: GET /bookings/list?session_id=guest-12345-abcde
    - For admin (all guest bookings): GET /bookings/list (no parameters)
    """
    return bookings_service.list_bookings(db, user_id, session_id)

@router.get("/all", response_model=List[schemas.BookingResponse])
def list_all_bookings(db: Session = Depends(get_db)):
    """
    Admin endpoint: List all bookings (both guest and user bookings)
    """
    return bookings_service.list_all_bookings(db)
